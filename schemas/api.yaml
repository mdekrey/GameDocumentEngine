openapi: 3.0.1
info:
  title: GameDocumentEngine
  version: v1
paths:
  /env:
    summary: Gets the public API environment data
    get:
      operationId: getInfo
      summary: Gets the public API environment data
      responses:
        200:
          description:
            Contains public environment info that is still useful for developers
            when debugging issues
          content:
            application/json:
              schema:
                type: object
                required:
                  - gitHash
                properties:
                  gitHash:
                    description: Git commit hash
                    type: string
  /locales:
    summary: Gets translations based on a language
    get:
      operationId: getTranslationData
      summary: Gets translations based on a language
      parameters:
        - name: ns
          schema: { type: string }
          required: true
          in: query
        - name: lng
          schema: { type: string }
          required: true
          in: query
      responses:
        200:
          description: An i18next compatible json document containing the translation data
          content:
            application/json:
              schema:
                type: object
                # each additional property at this level is a language
                additionalProperties:
                  type: object
                  # each additional property at this level is a namespace
                  additionalProperties: { type: object, format: any }
  /user:
    get:
      operationId: getCurrentUser
      security:
        - AuthenticatedUser: []
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserDetails"
        401:
          $ref: "#/components/responses/401"
        403:
          $ref: "#/components/responses/403"
        404:
          description: User not found
    patch:
      operationId: patchUser
      security:
        - AuthenticatedUser: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              format: patch
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserDetails"
        400:
          description: There was a problem applying the patch
          content:
            application/json:
              schema:
                type: string
        401:
          $ref: "#/components/responses/401"
        409:
          description: User was updated while request was being processed; try again later.
  /login:
    summary: Logs the user in
    get:
      operationId: login
      summary: Logs the user in
      parameters:
        - in: query
          name: returnUrl
          schema:
            type: string
            pattern: "^/[^/].*"
          required: false
      responses:
        302:
          description: Redirects to login url
  /game-type:
    get:
      operationId: listGameTypes
      security:
        - AuthenticatedUser: []
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  $ref: "#/components/schemas/GameTypeSummary"
        401:
          $ref: "#/components/responses/401"
  /game:
    get:
      # TODO: pagination
      operationId: listGames
      security:
        - AuthenticatedUser: []
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  $ref: '#/components/schemas/GameSummary'
        401:
          $ref: "#/components/responses/401"
    post:
      operationId: createGame
      security:
        - AuthenticatedUser: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateGameDetails"
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GameDetails"
        400:
          description: There was a validation issue creating the game.
        401:
          $ref: "#/components/responses/401"
  /game-type/{gameType}:
    get:
      x-dotnet-mvc-server-controller: Game
      operationId: getGameType
      security:
        - AuthenticatedUser: []
      parameters:
      - name: gameType
        in: path
        required: true
        schema: { type: string }
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GameTypeDetails"
        404:
          description: Target game type not found
  /game/{gameId}:
    get:
      x-dotnet-mvc-server-controller: Game
      operationId: getGameDetails
      security:
        - AuthenticatedUser: []
      parameters:
      - name: gameId
        in: path
        required: true
        schema: { type: string, format: guid }
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GameDetails"
        401:
          $ref: "#/components/responses/401"
        403:
          $ref: "#/components/responses/403"
        404:
          description: Target game not found
    delete:
      x-dotnet-mvc-server-controller: Game
      operationId: deleteGame
      security:
        - AuthenticatedUser: []
      parameters:
      - name: gameId
        in: path
        required: true
        schema: { type: string, format: guid }
      responses:
        200:
          description: Success
        401:
          $ref: "#/components/responses/401"
        403:
          $ref: "#/components/responses/403"
        404:
          description: Target game not found
    patch:
      x-dotnet-mvc-server-controller: Game
      operationId: patchGame
      security:
        - AuthenticatedUser: []
      parameters:
      - name: gameId
        in: path
        required: true
        schema: { type: string, format: guid }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              format: patch
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GameDetails"
        400:
          description: There was a problem applying the patch
          content:
            application/json:
              schema:
                type: string
        401:
          $ref: "#/components/responses/401"
        403:
          $ref: "#/components/responses/403"
        404:
          description: Target game not found
        409:
          description: Game was updated while request was being processed; try again later.
  /game/{gameId}/role-assignments:
    put:
      x-dotnet-mvc-server-controller: Game
      operationId: updateGameRoleAssignments
      security:
        - AuthenticatedUser: []
      parameters:
      - name: gameId
        in: path
        required: true
        schema: { type: string, format: guid }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties: { type: string }
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                additionalProperties: { type: string }
        400:
          description: There was a problem updating assignments
        401:
          $ref: "#/components/responses/401"
        403:
          $ref: "#/components/responses/403"
        404:
          description: Target game not found
  /game/{gameId}/user/{userId}:
    delete:
      x-dotnet-mvc-server-controller: Game
      operationId: removeUserFromGame
      security:
        - AuthenticatedUser: []
      parameters:
      - name: gameId
        in: path
        required: true
        schema: { type: string, format: guid }
      - name: userId
        in: path
        required: true
        schema: { type: string, format: guid }
      responses:
        204:
          description: Success
        400:
          description: User was not in the game
        401:
          $ref: "#/components/responses/401"
        403:
          $ref: "#/components/responses/403"
        404:
          description: Target game not found
  /game/{gameId}/document:
    get:
      # TODO: pagination and/or search
      x-dotnet-mvc-server-controller: Document
      operationId: listDocuments
      security:
        - AuthenticatedUser: []
      parameters:
      - name: gameId
        in: path
        required: true
        schema: { type: string, format: guid }
      - name: folderId
        in: query
        required: false
        schema: { type: string, format: guid }
      - name: type
        in: query
        required: false
        schema: { type: string }
      - { $ref: "#/components/parameters/search" }
      - { $ref: "#/components/parameters/limit" }
      - { $ref: "#/components/parameters/cursor" }
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                required:
                  - data
                  - pagination
                properties:
                  data:
                    type: object
                    additionalProperties:
                      $ref: "#/components/schemas/DocumentSummary"
                  pagination: { $ref: '#/components/schemas/PaginatedDetails' }
        401:
          $ref: "#/components/responses/401"
        404:
          description: Target game not found
    post:
      x-dotnet-mvc-server-controller: Document
      operationId: createDocument
      security:
        - AuthenticatedUser: []
      parameters:
      - name: gameId
        in: path
        required: true
        schema: { type: string, format: guid }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateDocumentDetails"
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DocumentDetails"
        400:
          description: Could not parse request
          content:
            application/json:
              schema:
                type: string
        401:
          $ref: "#/components/responses/401"
        403:
          $ref: "#/components/responses/403"
        404:
          description: Game id not found
  /game/{gameId}/document/{id}:
    get:
      x-dotnet-mvc-server-controller: Document
      operationId: getDocument
      parameters:
      - name: gameId
        in: path
        required: true
        schema: { type: string, format: guid }
      - name: id
        in: path
        required: true
        schema: { type: string, format: guid }
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DocumentDetails"
        404:
          description: Not Found
    delete:
      x-dotnet-mvc-server-controller: Document
      operationId: deleteDocument
      security:
        - AuthenticatedUser: []
      parameters:
      - name: gameId
        in: path
        required: true
        schema: { type: string, format: guid }
      - name: id
        in: path
        required: true
        schema: { type: string, format: guid }
      responses:
        200:
          description: Success
        401:
          $ref: "#/components/responses/401"
        403:
          $ref: "#/components/responses/403"
        404:
          description: Target document not found
    patch:
      x-dotnet-mvc-server-controller: Document
      operationId: patchDocument
      parameters:
      - name: gameId
        in: path
        required: true
        schema: { type: string, format: guid }
      - name: id
        in: path
        required: true
        schema: { type: string, format: guid }
      requestBody:
        required: true
        content:
          application/json:
            schema: { type: object, format: patch }
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DocumentDetails"
        400:
          description: There was a problem applying the patch
          content:
            application/json:
              schema:
                type: string
        401:
          $ref: "#/components/responses/401"
        403:
          $ref: "#/components/responses/403"
        404:
          description: Target document not found
        409:
          description: Document was updated while request was being processed; try again later.
  /game/{gameId}/document/{id}/role-assignments:
    put:
      x-dotnet-mvc-server-controller: Document
      operationId: updateDocumentRoleAssignments
      security:
        - AuthenticatedUser: []
      parameters:
      - name: gameId
        in: path
        required: true
        schema: { type: string, format: guid }
      - name: id
        in: path
        required: true
        schema: { type: string, format: guid }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties: { type: string, nullable: true }
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                additionalProperties: { type: string }
        400:
          description: There was a problem updating assignments
        401:
          $ref: "#/components/responses/401"
        403:
          $ref: "#/components/responses/403"
        404:
          description: Target game not found

  /game/{gameId}/invitations:
    get:
      # TODO: pagination
      x-dotnet-mvc-server-controller: Invitations
      operationId: listInvitations
      security:
        - AuthenticatedUser: []
      parameters:
      - name: gameId
        in: path
        required: true
        schema: { type: string, format: guid }
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  $ref: "#/components/schemas/GameInvite"
        401:
          $ref: "#/components/responses/401"
        403:
          $ref: "#/components/responses/403"
        404:
          description: Game not found
    post:
      x-dotnet-mvc-server-controller: Invitations
      operationId: createInvitation
      security:
        - AuthenticatedUser: []
      parameters:
      - name: gameId
        in: path
        required: true
        schema: { type: string, format: guid }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - role
                - uses
              properties:
                role: { type: string }
                uses: { type: integer }
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GameInvite"
        400:
          description: Requested role/uses not valid
        401:
          $ref: "#/components/responses/401"
        403:
          $ref: "#/components/responses/403"
        404:
          description: Game not found

  /invitations/{linkId}:
    get:
      x-dotnet-mvc-server-controller: Invitations
      operationId: claimInvitation
      security:
        - LoginUser: []
      parameters:
      - name: linkId
        in: path
        required: true
        schema: { type: string }
      responses:
        302:
          description: Redirect to Game
          headers:
            Location:
              schema:
                type: string
                format: uri
        401:
          $ref: "#/components/responses/401"
        403:
          $ref: "#/components/responses/403"
        404:
          description: Invite link invalid
    delete:
      x-dotnet-mvc-server-controller: Invitations
      operationId: cancelInvitation
      security:
        - AuthenticatedUser: []
      parameters:
      - name: linkId
        in: path
        required: true
        schema: { type: string }
      responses:
        204:
          description: Invite link deleted
        401:
          $ref: "#/components/responses/401"
        403:
          $ref: "#/components/responses/403"
        404:
          description: Invite link invalid

components:
  parameters:
    search:
      name: search
      in: query
      required: false
      schema: { type: string }
    limit:
      name: limit
      in: query
      required: false
      schema: { type: integer, default: 100 }
    cursor:
      name: cursor
      in: query
      required: false
      schema: { type: string }

  securitySchemes:
    AuthenticatedUser:
      type: apiKey
      in: cookie
      name: .AspNetCore.Cookies
    LoginUser:
      type: apiKey
      in: cookie
      name: .AspNetCore.Cookies

  schemas:
    PaginatedDetails:
      type: object
      required:
      - totalRecords
      - nextCursor
      properties:
        totalRecords: { type: integer }
        nextCursor: { type: string, nullable: true }
    CreateGameDetails:
      type: object
      required:
      - name
      - type
      properties:
        name: { type: string }
        type: { type: string }
    EditableGameDetails:
      type: object
      required:
      - name
      properties:
        name: { type: string }
    GameDetails:
      allOf:
        - $ref: '#/components/schemas/EditableGameDetails'
        - type: object
          required:
          - lastUpdated
          - playerNames
          - userRoles
          - permissions
          - typeInfo
          - id
          properties:
            id: { type: string, format: guid }
            lastUpdated: { type: string, format: date-time }
            playerNames:
              type: object
              additionalProperties: { type: string }
            userRoles:
              type: object
              additionalProperties: { type: string }
            permissions: { type: array, items: { type: string} }
            typeInfo:
              $ref: '#/components/schemas/GameTypeDetails'
    GameSummary:
      type: object
      required:
        - id
        - name
      properties:
        id: { type: string, format: guid }
        name: { type: string }

    GameInvite:
      type: object
      required:
        - id
        - gameId
        - link
        - role
        - usesRemaining
        - expiration
      properties:
        id: { type: string }
        gameId: { type: string, format: guid }
        role: { type: string }
        usesRemaining:
          type: integer
          description: "-1 with unlimited uses"
        expiration: { type: string, format: date-time }

    CreateDocumentDetails:
      type: object
      required:
      - name
      - type
      - details
      - folderId
      properties:
        name: { type: string }
        type: { type: string }
        details: { type: object, format: any }
        folderId: { type: string, format: guid, nullable: true }
    DocumentDetails:
      type: object
      required:
      - gameId
      - id
      - name
      - type
      - details
      - userRoles
      - permissions
      - folderId
      properties:
        gameId: { type: string, format: guid }
        id: { type: string, format: guid }
        name: { type: string }
        type: { type: string }
        details: { type: object, format: any }
        userRoles:
          type: object
          additionalProperties: { type: string }
        permissions: { type: array, items: { type: string} }
        folderId: { type: string, format: guid, nullable: true }
    DocumentSummary:
      type: object
      required:
        - id
        - name
        - type
        - folderId
      properties:
        id: { type: string, format: guid }
        name: { type: string }
        type: { type: string }
        folderId: { type: string, format: guid, nullable: true }

    UserDetails:
      type: object
      required:
        - id
        - name
        - profilePhoto
      properties:
        id: { type: string, format: guid }
        name: { type: string }
        profilePhoto: { type: string }

    GameTypeSummary:
      type: object
      required:
        - key
        - objectTypes
      properties:
        key: { type: string }
        objectTypes: { type: array, items: { type: string } }
    GameTypeDetails:
      type: object
      required:
        - key
        - objectTypes
        - userRoles
      properties:
        key: { type: string }
        userRoles: { type: array, items: { type: string } }
        objectTypes:
          type: array
          items:
            $ref: '#/components/schemas/GameObjectTypeDetails'
    GameObjectTypeDetails:
      type: object
      required:
        - key
        - scripts
        - userRoles
      properties:
        key: { type: string }
        scripts: { type: array, items: { type: string } }
        userRoles: { type: array, items: { type: string } }
  responses:
    "401":
      description: User was not authenticated
    "403":
      description: User did not have permissions