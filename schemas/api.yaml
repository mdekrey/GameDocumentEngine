openapi: 3.0.1
info:
  title: GameDocumentEngine
  version: v1
paths:
  /user:
    get:
      operationId: getCurrentUser
      security:
        - AuthenticatedUser: []
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CurrentUserDetails"
    patch:
      operationId: patchUser
      security:
        - AuthenticatedUser: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              format: patch
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserDetails"
        400:
          description: There was a problem applying the patch
          content:
            application/json:
              schema:
                type: string
        409:
          description: User was updated while request was being processed; try again later.
  /login:
    summary: Logs the user in
    get:
      operationId: login
      summary: Logs the user in
      parameters:
        - in: query
          name: returnUrl
          schema:
            type: string
            pattern: "^/[^/].*"
          required: false
      responses:
        302:
          description: Redirects to login url
  /game-type:
    get:
      operationId: listGameTypes
      security:
        - AuthenticatedUser: []
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/GameTypeSummary"
  /game:
    get:
      operationId: listGames
      security:
        - AuthenticatedUser: []
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GameSummary'
    post:
      operationId: createGame
      security:
        - AuthenticatedUser: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateGameDetails"
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GameDetailsWithId"
        400:
          description: There was a validation issue creating the game.
  /game/{gameId}:
    get:
      x-dotnet-mvc-server-controller: Game
      operationId: getGameDetails
      security:
        - AuthenticatedUser: []
      parameters:
      - name: gameId
        in: path
        required: true
        schema: { type: string, format: guid }
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GameDetailsWithId"
        404:
          description: Target game not found
    delete:
      x-dotnet-mvc-server-controller: Game
      operationId: deleteGame
      security:
        - AuthenticatedUser: []
      parameters:
      - name: gameId
        in: path
        required: true
        schema: { type: string, format: guid }
      responses:
        200:
          description: Success
        404:
          description: Target game not found
    patch:
      x-dotnet-mvc-server-controller: Game
      operationId: patchGame
      security:
        - AuthenticatedUser: []
      parameters:
      - name: gameId
        in: path
        required: true
        schema: { type: string, format: guid }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              format: patch
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GameDetailsWithId"
        400:
          description: There was a problem applying the patch
          content:
            application/json:
              schema:
                type: string
        404:
          description: Target game not found
        409:
          description: Game was updated while request was being processed; try again later.
  /game/{gameId}/document:
    get:
      x-dotnet-mvc-server-controller: Document
      operationId: listDocuments
      security:
        - AuthenticatedUser: []
      parameters:
      - name: gameId
        in: path
        required: true
        schema: { type: string, format: guid }
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/DocumentSummary"
    post:
      x-dotnet-mvc-server-controller: Document
      operationId: createDocument
      security:
        - AuthenticatedUser: []
      parameters:
      - name: gameId
        in: path
        required: true
        schema: { type: string, format: guid }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateDocumentDetails"
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DocumentDetailsWithId"
        400:
          description: Could not parse request
          content:
            application/json:
              schema:
                type: string
        404:
          description: Game id not found
  /game/{gameId}/document/{id}:
    get:
      x-dotnet-mvc-server-controller: Document
      operationId: getDocument
      parameters:
      - name: gameId
        in: path
        required: true
        schema: { type: string, format: guid }
      - name: id
        in: path
        required: true
        schema: { type: string, format: guid }
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DocumentDetails"
        404:
          description: Not Found
    delete:
      x-dotnet-mvc-server-controller: Document
      operationId: deleteDocument
      security:
        - AuthenticatedUser: []
      parameters:
      - name: gameId
        in: path
        required: true
        schema: { type: string, format: guid }
      - name: id
        in: path
        required: true
        schema: { type: string, format: guid }
      responses:
        200:
          description: Success
        404:
          description: Target document not found
    patch:
      x-dotnet-mvc-server-controller: Document
      operationId: patchDocument
      parameters:
      - name: gameId
        in: path
        required: true
        schema: { type: string, format: guid }
      - name: id
        in: path
        required: true
        schema: { type: string, format: guid }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EditableDocumentDetails"
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DocumentDetails"
        400:
          description: There was a problem applying the patch
          content:
            application/json:
              schema:
                type: string
        404:
          description: Target document not found
        409:
          description: Document was updated while request was being processed; try again later.
components:
  securitySchemes:
    AuthenticatedUser:
      type: apiKey
      in: cookie
      name: .AspNetCore.Cookies

  schemas:
    CreateGameDetails:
      type: object
      required:
      - name
      - type
      properties:
        name: { type: string }
        type: { type: string }
    EditableGameDetails:
      type: object
      required:
      - name
      properties:
        name: { type: string }
    GameDetails:
      allOf:
        - $ref: '#/components/schemas/EditableGameDetails'
        - type: object
          required:
          - lastUpdated
          - players
          - inviteUrl
          - typeInfo
          properties:
            lastUpdated: { type: string, format: date-time }
            players:
              type: array
              items:
                type: string
            inviteUrl: { type: string }
            typeInfo:
              $ref: '#/components/schemas/GameTypeDetails'
    GameDetailsWithId:
      allOf:
        - $ref: '#/components/schemas/GameDetails'
        - type: object
          required:
            - id
          properties:
            id: { type: string, format: guid }
    GameSummary:
      type: object
      required:
        - id
        - name
      properties:
        id: { type: string, format: guid }
        name: { type: string }

    BaseDocumentDetails:
      type: object
      required:
      - name
      - details
      properties:
        name: { type: string }
        details: { type: object, format: any }
    EditableDocumentDetails:
      type: object
      required:
      - name
      - details
      properties:
        name: { type: string }
        details: { type: object, format: patch }
    CreateDocumentDetails:
      allOf:
        - $ref: '#/components/schemas/BaseDocumentDetails'
        - type: object
          required:
          - type
          properties:
            type: { type: string }
    DocumentDetails:
      allOf:
        - $ref: '#/components/schemas/BaseDocumentDetails'
        - type: object
          required:
          - lastUpdated
          # TODO: show player permissions
          properties:
            lastUpdated: { type: string, format: date-time }
    DocumentDetailsWithId:
      allOf:
        - $ref: '#/components/schemas/DocumentDetails'
        - type: object
          required:
            - id
          properties:
            id: { type: string, format: guid }
    DocumentSummary:
      type: object
      required:
        - id
        - name
        - type
      properties:
        id: { type: string, format: guid }
        name: { type: string }
        type: { type: string }
        # TODO: some way to provide a summary object

    CurrentUserDetails:
      allOf:
      - $ref: '#/components/schemas/UserDetails'
      - type: object
        required:
          - isFirstTime
        properties:
          # TODO: There should be a better way
          isFirstTime: { type: boolean }
    UserDetails:
      type: object
      required:
        - name
      properties:
        name: { type: string }

    GameTypeSummary:
      type: object
      required:
        - name
        - description
        - objectTypes
      properties:
        name: { type: string }
        description: { type: string }
        objectTypes: { type: array, items: { type: string } }
    GameTypeDetails:
      type: object
      required:
        - name
        - objectTypes
      properties:
        name: { type: string }
        objectTypes:
          type: array
          items:
            $ref: '#/components/schemas/GameObjectTypeDetails'
    GameObjectTypeDetails:
      type: object
      required:
        - name
        - scripts
      properties:
        name: { type: string }
        scripts: { type: array, items: { type: string } }
  responses:
    "401":
      description: User was not authenticated